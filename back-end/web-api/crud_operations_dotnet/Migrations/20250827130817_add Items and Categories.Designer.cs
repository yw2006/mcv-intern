// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using crud_operations_dotnet.Data;

#nullable disable

namespace crud_operations_dotnet.Migrations
{
    [DbContext(typeof(CrudContext))]
    [Migration("20250827130817_add Items and Categories")]
    partial class addItemsandCategories
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("crud_operations_dotnet.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearPublished")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "George Orwell",
                            Title = "1984",
                            YearPublished = 1949
                        },
                        new
                        {
                            Id = 2,
                            Author = "Harper Lee",
                            Title = "To Kill a Mockingbird",
                            YearPublished = 1960
                        },
                        new
                        {
                            Id = 3,
                            Author = "F. Scott Fitzgerald",
                            Title = "The Great Gatsby",
                            YearPublished = 1925
                        });
                });

            modelBuilder.Entity("crud_operations_dotnet.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Devices and gadgets",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Apparel for men and women",
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Tables, chairs, and home furniture",
                            Name = "Furniture"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Fitness and outdoor gear",
                            Name = "Sports & Outdoors"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Smartwatches, fitness trackers, and wearable technology",
                            Name = "Wearables"
                        });
                });

            modelBuilder.Entity("crud_operations_dotnet.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Ergonomic wireless mouse with 2.4GHz connectivity.",
                            Name = "Wireless Mouse",
                            Price = 250m,
                            Quantity = 30
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "RGB backlit mechanical keyboard with blue switches.",
                            Name = "Mechanical Keyboard",
                            Price = 1200m,
                            Quantity = 15
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "Over-ear gaming headset with noise cancellation and mic.",
                            Name = "Gaming Headset",
                            Price = 850m,
                            Quantity = 20
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "Fast charging 45W USB-C wall adapter.",
                            Name = "USB-C Charger",
                            Price = 400m,
                            Quantity = 50
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Description = "Adjustable aluminum laptop stand for better posture.",
                            Name = "Laptop Stand",
                            Price = 300m,
                            Quantity = 25
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Description = "Flexible tripod with universal phone holder.",
                            Name = "Smartphone Tripod",
                            Price = 150m,
                            Quantity = 40
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            Description = "1TB portable USB 3.0 external hard drive.",
                            Name = "External Hard Drive",
                            Price = 1500m,
                            Quantity = 10
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            Description = "Portable waterproof Bluetooth speaker with deep bass.",
                            Name = "Bluetooth Speaker",
                            Price = 600m,
                            Quantity = 35
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            Description = "Water-resistant fitness tracker with heart rate monitor.",
                            Name = "Fitness Tracker",
                            Price = 750m,
                            Quantity = 22
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            Description = "Touchscreen smartwatch with sleep tracking and notifications.",
                            Name = "Smartwatch",
                            Price = 1800m,
                            Quantity = 12
                        });
                });

            modelBuilder.Entity("crud_operations_dotnet.Models.Item", b =>
                {
                    b.HasOne("crud_operations_dotnet.Models.Category", null)
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("crud_operations_dotnet.Models.Category", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
